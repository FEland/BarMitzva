{"ast":null,"code":"import _slicedToArray from \"/Users/femac2/Desktop/ALL DESK/trope/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nfunction useAudioPlayer(audio) {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        duration = _useState2[0],\n        setDuration = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        curTime = _useState4[0],\n        setCurTime = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        playing = _useState6[0],\n        setPlaying = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        clickedTime = _useState8[0],\n        setClickedTime = _useState8[1];\n\n  useEffect(() => {\n    // state setters wrappers\n    const setAudioData = () => {\n      setDuration(audio.duration);\n      setCurTime(audio.currentTime);\n    };\n\n    const setAudioTime = () => setCurTime(audio.currentTime); // DOM listeners: update React state on DOM events\n\n\n    audio.addEventListener(\"loadeddata\", setAudioData);\n    audio.addEventListener(\"timeupdate\", setAudioTime); // React state listeners: update DOM on React state changes\n\n    playing ? audio.play() : audio.pause();\n\n    if (clickedTime && clickedTime !== curTime) {\n      audio.currentTime = clickedTime;\n      setClickedTime(null);\n    } // effect cleanup\n\n\n    return () => {\n      audio.removeEventListener(\"loadeddata\", setAudioData);\n      audio.removeEventListener(\"timeupdate\", setAudioTime);\n    };\n  });\n  return {\n    curTime,\n    duration,\n    playing,\n    setPlaying,\n    setClickedTime\n  };\n}\n\nexport default useAudioPlayer;","map":{"version":3,"sources":["/Users/femac2/Desktop/ALL DESK/trope/src/useAudioPlayer.js"],"names":["useState","useEffect","useAudioPlayer","audio","duration","setDuration","curTime","setCurTime","playing","setPlaying","clickedTime","setClickedTime","setAudioData","currentTime","setAudioTime","addEventListener","play","pause","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,oBACGH,QAAQ,EADX;AAAA;AAAA,QACtBI,QADsB;AAAA,QACZC,WADY;;AAAA,qBAECL,QAAQ,EAFT;AAAA;AAAA,QAEtBM,OAFsB;AAAA,QAEbC,UAFa;;AAAA,qBAGCP,QAAQ,CAAC,KAAD,CAHT;AAAA;AAAA,QAGtBQ,OAHsB;AAAA,QAGbC,UAHa;;AAAA,qBAIST,QAAQ,EAJjB;AAAA;AAAA,QAItBU,WAJsB;AAAA,QAITC,cAJS;;AAM7BV,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,UAAMW,YAAY,GAAG,MAAM;AACzBP,MAAAA,WAAW,CAACF,KAAK,CAACC,QAAP,CAAX;AACAG,MAAAA,UAAU,CAACJ,KAAK,CAACU,WAAP,CAAV;AACD,KAHD;;AAKA,UAAMC,YAAY,GAAG,MAAMP,UAAU,CAACJ,KAAK,CAACU,WAAP,CAArC,CARc,CAUd;;;AACAV,IAAAA,KAAK,CAACY,gBAAN,CAAuB,YAAvB,EAAqCH,YAArC;AAEAT,IAAAA,KAAK,CAACY,gBAAN,CAAuB,YAAvB,EAAqCD,YAArC,EAbc,CAed;;AACAN,IAAAA,OAAO,GAAGL,KAAK,CAACa,IAAN,EAAH,GAAkBb,KAAK,CAACc,KAAN,EAAzB;;AAEA,QAAIP,WAAW,IAAIA,WAAW,KAAKJ,OAAnC,EAA4C;AAC1CH,MAAAA,KAAK,CAACU,WAAN,GAAoBH,WAApB;AACAC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KArBa,CAuBd;;;AACA,WAAO,MAAM;AACXR,MAAAA,KAAK,CAACe,mBAAN,CAA0B,YAA1B,EAAwCN,YAAxC;AACAT,MAAAA,KAAK,CAACe,mBAAN,CAA0B,YAA1B,EAAwCJ,YAAxC;AACD,KAHD;AAID,GA5BQ,CAAT;AA8BA,SAAO;AACLR,IAAAA,OADK;AAELF,IAAAA,QAFK;AAGLI,IAAAA,OAHK;AAILC,IAAAA,UAJK;AAKLE,IAAAA;AALK,GAAP;AAOD;;AAED,eAAeT,cAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useAudioPlayer(audio) {\n  const [duration, setDuration] = useState();\n  const [curTime, setCurTime] = useState();\n  const [playing, setPlaying] = useState(false);\n  const [clickedTime, setClickedTime] = useState();\n\n  useEffect(() => {\n\n    // state setters wrappers\n    const setAudioData = () => {\n      setDuration(audio.duration);\n      setCurTime(audio.currentTime);\n    }\n\n    const setAudioTime = () => setCurTime(audio.currentTime);\n\n    // DOM listeners: update React state on DOM events\n    audio.addEventListener(\"loadeddata\", setAudioData);\n\n    audio.addEventListener(\"timeupdate\", setAudioTime);\n\n    // React state listeners: update DOM on React state changes\n    playing ? audio.play() : audio.pause();\n\n    if (clickedTime && clickedTime !== curTime) {\n      audio.currentTime = clickedTime;\n      setClickedTime(null);\n    } \n\n    // effect cleanup\n    return () => {\n      audio.removeEventListener(\"loadeddata\", setAudioData);\n      audio.removeEventListener(\"timeupdate\", setAudioTime);\n    }\n  });\n\n  return {\n    curTime,\n    duration,\n    playing,\n    setPlaying,\n    setClickedTime\n  }\n}\n\nexport default useAudioPlayer;"]},"metadata":{},"sourceType":"module"}